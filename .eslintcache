[{"C:\\Users\\77jen\\math\\src\\index.jsx":"1","C:\\Users\\77jen\\math\\src\\App.jsx":"2"},{"size":402,"mtime":1607201436370,"results":"3","hashOfConfig":"4"},{"size":9587,"mtime":1607581710669,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"8"},"1u63pmf",{"filePath":"9","messages":"10","errorCount":0,"warningCount":20,"fixableErrorCount":0,"fixableWarningCount":0,"source":"11"},"C:\\Users\\77jen\\math\\src\\index.jsx",[],["12","13"],"C:\\Users\\77jen\\math\\src\\App.jsx",["14","15","16","17","18","19","20","21","22","23","24","25","26","27","28","29","30","31","32","33"],"import \"./index.css\";\r\nimport React, { Component } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { valueAndGrads } from \"@tensorflow/tfjs\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state= {\r\n      lastPosition:null,\r\n      drawing:false,\r\n      prediction:null,\r\n    };\r\n    this.canvasRef = React.createRef();\r\n    this.clear = this.clear.bind(this);\r\n    this.predict = this.predict.bind(this);\r\n    this.moving = this.moving.bind(this);\r\n    this.split = this.split.bind(this);\r\n    this.rescaled = this.rescaled.bind(this);\r\n  }\r\n\r\n  handleEvent = (event) => {\r\n    if (event.type === \"mousedown\")\r\n      this.setState({ drawing: true});\r\n    else\r\n      this.setState({ drawing: false});\r\n   }\r\n\r\n  clear() {\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = \"#FFFF\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  async split(n){\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const resizedCanvas = document.createElement(\"canvas\");\r\n    const resizedContext = resizedCanvas.getContext(\"2d\");\r\n    resizedCanvas.width = await canvas.width/n;\r\n    resizedCanvas.height = 400;\r\n\r\n    const splits = [];\r\n    for(var i = 0; i < n; i++){\r\n      var img = new Image(600/n,400);\r\n      const Image_data = await ctx.getImageData(i*canvas.width/n, 0, 600/n, 400);\r\n      resizedContext.putImageData(Image_data,0,0);\r\n      img.src = resizedCanvas.toDataURL();\r\n      splits.push(img);\r\n    }\r\n    console.log(splits);\r\n\r\n    return splits; //returns an array of Elemets <img>\r\n  }\r\n\r\n  async rescaled(arr){\r\n    const rescaled = [];\r\n\r\n    const resizedCanvas = document.createElement(\"canvas\");\r\n    const resizedContext = resizedCanvas.getContext(\"2d\");\r\n    resizedCanvas.height = 32;\r\n    resizedCanvas.width = 32;\r\n\r\n    for(let i = 0; i < arr.length; i++){\r\n      var img = new Image(32,32);\r\n      resizedContext.drawImage(await arr[i],0,0,32,32);\r\n      img.src = resizedCanvas.toDataURL();\r\n      resizedContext.clearRect(0,0,32,32);\r\n      rescaled.push(img);\r\n    }\r\n    console.log(rescaled);\r\n    return rescaled;\r\n  }\r\n\r\n  async predict(){\r\n    const model = await tf.loadLayersModel('https://storage.googleapis.com/mathsolvermodel/model.json');\r\n\r\n    var split_count = 4;\r\n    var counter_1 = 0;\r\n    var counter_2 = 0;\r\n    var counter_3 = 0;\r\n    var counter_4 = 0;\r\n    var threshold = 0.7;\r\n\r\n\r\n    var split_images = [];\r\n    var resized_images = [];\r\n\r\n    var resized_grayscale_Tensor = null;\r\n    var prediction = null;\r\n    var value = [];\r\n    var counter_arr = [];\r\n\r\n    for(let i = 1; i < split_count+1; i++){\r\n      split_images = await this.split(i);\r\n      resized_images = await this.rescaled(split_images);\r\n      console.log(resized_images);\r\n      console.log(\"above you\");\r\n        for (let j = 0; j < resized_images.length; j++){\r\n          resized_grayscale_Tensor = tf.browser.fromPixels(resized_images[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n          prediction = model.predict(resized_grayscale_Tensor);\r\n          value = prediction.dataSync();\r\n          for (let k = 0; k < value.length; k++){\r\n            switch (i){\r\n              case 1:\r\n                if (value[k] > threshold){\r\n                  counter_1++;\r\n                  console.log('counter_1',counter_1);\r\n                }\r\n                break;\r\n              case 2:\r\n                if (value[k] > threshold){\r\n                  counter_2++;\r\n                  console.log(counter_2);\r\n                }\r\n                break;\r\n              case 3:\r\n                if (value[k] > threshold){\r\n                  counter_3++;\r\n                  console.log(counter_3);\r\n                }\r\n                break;\r\n              case 4:\r\n                if (value[k] > threshold){\r\n                  counter_4++;\r\n                  console.log(counter_4);\r\n                }\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        console.log('counter pls', counter_arr);\r\n      }\r\n      counter_arr.push(parseInt(counter_1));\r\n      counter_arr.push(parseInt(counter_2));\r\n      counter_arr.push(parseInt(counter_3));\r\n      counter_arr.push(parseInt(counter_4));\r\n\r\n      var max_counter_index = counter_arr.indexOf(Math.max(...counter_arr));\r\n      var characters = ['0','1','2','3','4','5','6','7','8','9','-','+','*','(',')','y','=']\r\n      var val = []\r\n      var max_values = [];\r\n      console.log(\"max Counter index\", max_counter_index);\r\n      switch(max_counter_index){\r\n        case(0):\r\n          var split_images_1 = await this.split(max_counter_index);\r\n          var resized_images_1 = await this.rescaled(split_images_1);\r\n          for (let j = 0; j < resized_images_1.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_1[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n            \r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n        case(1):\r\n          var split_images_2 = await this.split(max_counter_index);\r\n          var resized_images_2 = await this.rescaled(split_images_2);\r\n          for (let j = 0; j < resized_images_2.length; j++){\r\n            var resized= tf.browser.fromPixels(resized_images_2[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n            \r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n\r\n        case(2):\r\n          var split_images_3 = await this.split(max_counter_index);\r\n          var resized_images_3 = await this.rescaled(split_images_3);\r\n          for (let j = 0; j < resized_images_3.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_3[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n\r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n        case(3):\r\n          var split_images_4 = await this.split(max_counter_index);\r\n          var resized_images_4 = await this.rescaled(split_images_4);\r\n          for (let j = 0; j < resized_images_4.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_4[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n\r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        console.log(max_values);\r\n        var str = \"\";\r\n        for(var i = 0; i < max_values.length; i++){\r\n          str += characters[max_values[i]] + \" \";\r\n        }\r\n\r\n        this.setState({ prediction: str});\r\n\r\n\r\n    }\r\n\r\n  moving(e) {\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n      var pos = {\r\n        x: e.clientX - canvas.getBoundingClientRect().left,\r\n        y: e.clientY - canvas.getBoundingClientRect().top\r\n      };\r\n    if (this.state.lastPosition !== null && this.state.drawing) {\r\n      ctx.lineWidth = 10;\r\n      ctx.lineCap = \"round\";\r\n      ctx.beginPath();\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.moveTo(this.state.lastPosition.x, this.state.lastPosition.y);\r\n      ctx.lineTo(pos.x, pos.y);\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    }\r\n    this.setState({lastPosition: pos});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>My Math Solver</h1>\r\n        <canvas ref={this.canvasRef} width={600} height={400} onMouseMove={e => this.moving(e)} onMouseUp={this.handleEvent} onMouseDown={this.handleEvent}> </canvas>\r\n        <div className=\"stuffs\">\r\n          <button onClick={this.clear}>Clear</button>\r\n          <button onClick={this.predict}>Predict</button>\r\n          <img className=\"t\"></img>\r\n        </div>\r\n        <h2>{this.state.prediction}</h2>\r\n        <h2>{eval(this.state.prediction)}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n",{"ruleId":"34","replacedBy":"35"},{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","severity":1,"message":"39","line":4,"column":10,"nodeType":"40","messageId":"41","endLine":4,"endColumn":23},{"ruleId":"42","severity":1,"message":"43","line":108,"column":13,"nodeType":"44","messageId":"45","endLine":133,"endColumn":14},{"ruleId":"42","severity":1,"message":"43","line":148,"column":7,"nodeType":"44","messageId":"45","endLine":242,"endColumn":10},{"ruleId":"46","severity":1,"message":"47","line":176,"column":17,"nodeType":"40","messageId":"48","endLine":176,"endColumn":24},{"ruleId":"46","severity":1,"message":"49","line":177,"column":17,"nodeType":"40","messageId":"48","endLine":177,"endColumn":21},{"ruleId":"46","severity":1,"message":"50","line":180,"column":17,"nodeType":"40","messageId":"48","endLine":180,"endColumn":21},{"ruleId":"46","severity":1,"message":"51","line":181,"column":17,"nodeType":"40","messageId":"48","endLine":181,"endColumn":20},{"ruleId":"46","severity":1,"message":"52","line":183,"column":21,"nodeType":"40","messageId":"48","endLine":183,"endColumn":22},{"ruleId":"46","severity":1,"message":"47","line":200,"column":17,"nodeType":"40","messageId":"48","endLine":200,"endColumn":24},{"ruleId":"46","severity":1,"message":"49","line":201,"column":17,"nodeType":"40","messageId":"48","endLine":201,"endColumn":21},{"ruleId":"46","severity":1,"message":"50","line":204,"column":17,"nodeType":"40","messageId":"48","endLine":204,"endColumn":21},{"ruleId":"46","severity":1,"message":"51","line":205,"column":17,"nodeType":"40","messageId":"48","endLine":205,"endColumn":20},{"ruleId":"46","severity":1,"message":"52","line":207,"column":21,"nodeType":"40","messageId":"48","endLine":207,"endColumn":22},{"ruleId":"46","severity":1,"message":"47","line":223,"column":17,"nodeType":"40","messageId":"48","endLine":223,"endColumn":24},{"ruleId":"46","severity":1,"message":"49","line":224,"column":17,"nodeType":"40","messageId":"48","endLine":224,"endColumn":21},{"ruleId":"46","severity":1,"message":"50","line":227,"column":17,"nodeType":"40","messageId":"48","endLine":227,"endColumn":21},{"ruleId":"46","severity":1,"message":"51","line":228,"column":17,"nodeType":"40","messageId":"48","endLine":228,"endColumn":20},{"ruleId":"46","severity":1,"message":"52","line":230,"column":21,"nodeType":"40","messageId":"48","endLine":230,"endColumn":22},{"ruleId":"53","severity":1,"message":"54","line":283,"column":11,"nodeType":"55","endLine":283,"endColumn":30},{"ruleId":"56","severity":1,"message":"57","line":286,"column":14,"nodeType":"58","messageId":"59","endLine":286,"endColumn":18},"no-native-reassign",["60"],"no-negated-in-lhs",["61"],"no-unused-vars","'valueAndGrads' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","no-redeclare","'resized' is already defined.","redeclared","'pred' is already defined.","'maxi' is already defined.","'pos' is already defined.","'k' is already defined.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","no-eval","eval can be harmful.","CallExpression","unexpected","no-global-assign","no-unsafe-negation"]