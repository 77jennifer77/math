{"version":3,"sources":["App.jsx","index.jsx"],"names":["App","props","handleEvent","event","type","setState","drawing","state","lastPosition","prediction","canvasRef","React","createRef","clear","bind","predict","moving","split","rescaled","canvas","this","current","ctx","getContext","clearRect","width","height","fillStyle","fillRect","n","resizedCanvas","document","createElement","resizedContext","splits","i","img","Image","getImageData","Image_data","putImageData","src","toDataURL","push","console","log","arr","length","drawImage","tf","model","split_count","counter_1","counter_2","counter_3","counter_4","threshold","split_images","resized_images","resized_grayscale_Tensor","value","counter_arr","j","fromPixels","mean","toFloat","expandDims","dataSync","k","parseInt","max_counter_index","indexOf","Math","max","characters","val","max_values","split_images_1","resized_images_1","resized","pred","maxi","pos","split_images_2","resized_images_2","split_images_3","resized_images_3","split_images_4","resized_images_4","str","e","x","clientX","getBoundingClientRect","left","y","clientY","top","lineWidth","lineCap","beginPath","moveTo","lineTo","closePath","stroke","ref","onMouseMove","onMouseUp","onMouseDown","className","onClick","eval","Component","ReactDOM","render","getElementById"],"mappings":"+vEAMMA,I,oVACJ,aAAYC,GAAO,IAAD,wKAChB,mBAAMA,IAcRC,YAAc,SAACC,GACM,cAAfA,EAAMC,KACR,EAAKC,SAAS,CAAEC,SAAS,IAEzB,EAAKD,SAAS,CAAEC,SAAS,KAjB3B,EAAKC,MAAO,CACVC,aAAa,KACbF,SAAQ,EACRG,WAAW,MAEb,EAAKC,UAAYC,8CAAMC,YACvB,EAAKC,MAAQ,EAAKA,MAAMC,KAAX,+JACb,EAAKC,QAAU,EAAKA,QAAQD,KAAb,+JACf,EAAKE,OAAS,EAAKA,OAAOF,KAAZ,+JACd,EAAKG,MAAQ,EAAKA,MAAMH,KAAX,+JACb,EAAKI,SAAW,EAAKA,SAASJ,KAAd,+JAZA,E,2LAuBhB,IAAMK,EAASC,KAAKV,UAAUW,QACxBC,EAAMH,EAAOI,WAAW,MAC9BD,EAAIE,UAAU,EAAG,EAAGL,EAAOM,MAAON,EAAOO,QACzCJ,EAAIK,UAAY,QAChBL,EAAIM,SAAS,EAAG,EAAGT,EAAOM,MAAON,EAAOO,U,gVAG9BG,G,6NACJV,EAASC,KAAKV,UAAUW,QACxBC,EAAMH,EAAOI,WAAW,MAExBO,EAAgBC,SAASC,cAAc,UACvCC,EAAiBH,EAAcP,WAAW,M,SACpBJ,EAAOM,M,wBAAMI,EAAzCC,EAAcL,M,UACdK,EAAcJ,OAAS,IAEjBQ,EAAS,GACPC,EAAI,E,aAAGA,EAAIN,G,wBACbO,EAAM,IAAIC,MAAM,IAAIR,EAAE,K,UACDP,EAAIgB,aAAaH,EAAEhB,EAAOM,MAAMI,EAAG,EAAG,IAAIA,EAAG,K,QAAhEU,E,OACNN,EAAeO,aAAaD,EAAW,EAAE,GACzCH,EAAIK,IAAMX,EAAcY,YACxBR,EAAOS,KAAKP,G,QALQD,I,+BAOtBS,QAAQC,IAAIX,G,kBAELA,G,2bAGMY,G,gNACP5B,EAAW,GAEXY,EAAgBC,SAASC,cAAc,UACvCC,EAAiBH,EAAcP,WAAW,MAChDO,EAAcJ,OAAS,GACvBI,EAAcL,MAAQ,GAEdU,EAAI,E,YAAGA,EAAIW,EAAIC,Q,wBACjBX,EAAM,IAAIC,MAAM,GAAG,I,KACvBJ,E,UAA+Ba,EAAIX,G,yBAApBa,U,eAAuB,EAAE,EAAE,GAAG,IAC7CZ,EAAIK,IAAMX,EAAcY,YACxBT,EAAeT,UAAU,EAAE,EAAE,GAAG,IAChCN,EAASyB,KAAKP,G,QALeD,I,8BAO/BS,QAAQC,IAAI3B,G,kBACLA,G,2tBAIa+B,iDAAmB,6D,OAAjCC,E,OAEFC,EAAc,EACdC,EAAY,EACZC,EAAY,EACZC,EAAY,EACZC,EAAY,EACZC,EAAY,GAGZC,EAAe,GACfC,EAAiB,GAEjBC,EAA2B,KAC3BlD,EAAa,KACbmD,EAAQ,GACRC,EAAc,GAEV1B,EAAI,E,aAAGA,EAAIgB,EAAY,G,kCACR/B,KAAKH,MAAMkB,G,eAAhCsB,E,iBACuBrC,KAAKF,SAASuC,G,QAArCC,E,OACAd,QAAQC,IAAIa,GACZd,QAAQC,IAAI,aACDiB,EAAI,E,aAAGA,EAAIJ,EAAeX,Q,iBACjCY,EAA2BV,iDAAWc,WAAWL,EAAeI,IAAIE,KAAK,GAAGC,UAAUC,WAAW,GAAGA,YAAY,GAChHzD,EAAayC,EAAMnC,QAAQ4C,GAC3BC,EAAQnD,EAAW0D,WACVC,EAAI,E,aAAGA,EAAIR,EAAMb,Q,sBAChBZ,E,OACD,I,QAMA,I,QAMA,I,QAMA,I,gCAjBCyB,EAAMQ,GAAKZ,IACbJ,IACAR,QAAQC,IAAI,YAAYO,I,oCAItBQ,EAAMQ,GAAKZ,IACbH,IACAT,QAAQC,IAAIQ,I,oCAIVO,EAAMQ,GAAKZ,IACbF,IACAV,QAAQC,IAAIS,I,oCAIVM,EAAMQ,GAAKZ,IACbD,IACAX,QAAQC,IAAIU,I,6BAvBca,I,wBAJON,I,wBAiC3ClB,QAAQC,IAAI,cAAegB,G,QAtCG1B,I,wBAwChC0B,EAAYlB,KAAK0B,SAASjB,IAC1BS,EAAYlB,KAAK0B,SAAShB,IAC1BQ,EAAYlB,KAAK0B,SAASf,IAC1BO,EAAYlB,KAAK0B,SAASd,IAEtBe,EAAoBT,EAAYU,QAAQC,KAAKC,IAAL,MAAAD,KAAYX,IACpDa,EAAa,CAAC,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,IAAI,KAC9EC,EAAM,GACNC,EAAa,GACjBhC,QAAQC,IAAI,oBAAqByB,G,KAC1BA,E,OACA,I,QAuBA,I,QAwBA,I,QAuBA,I,2CArEwBlD,KAAKH,MAAMqD,G,eAAlCO,E,iBACyBzD,KAAKF,SAAS2D,G,QAC3C,IADIC,E,OACKhB,EAAI,EAAGA,EAAIgB,EAAiB/B,OAAQe,IAAI,CAQ/C,IAPIiB,EAAU9B,iDAAWc,WAAWe,EAAiBhB,IAAIE,KAAK,GAAGC,UAAUC,WAAW,GAAGA,YAAY,GACjGc,EAAO9B,EAAMnC,QAAQgE,GACzBJ,EAAMK,EAAKb,WAEPc,EAAO,EACPC,EAAM,EAEFd,EAAI,EAAGA,EAAIO,EAAI5B,OAAQqB,IAC1Ba,EAAON,EAAIP,KACZa,EAAON,EAAIP,GACXc,EAAMd,GAIPa,GAAQzB,GACToB,EAAWjC,KAAKuC,G,OAEpBtC,QAAQC,IAAI,oBAAqB6B,EAAWC,EAAIJ,QAAQC,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,MAAO,YAAYH,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,K,+CAGxEvD,KAAKH,MAAMqD,G,eAAlCa,E,iBACyB/D,KAAKF,SAASiE,G,QAC3C,IADIC,E,OACKtB,EAAI,EAAGA,EAAIsB,EAAiBrC,OAAQe,IAAI,CAQ/C,IAPIiB,EAAS9B,iDAAWc,WAAWqB,EAAiBtB,IAAIE,KAAK,GAAGC,UAAUC,WAAW,GAAGA,YAAY,GAChGc,EAAO9B,EAAMnC,QAAQgE,GACzBJ,EAAMK,EAAKb,WAEPc,EAAO,EACPC,EAAM,EAEFd,EAAI,EAAGA,EAAIO,EAAI5B,OAAQqB,IAC1Ba,EAAON,EAAIP,KACZa,EAAON,EAAIP,GACXc,EAAMd,GAIPa,GAAQzB,GACToB,EAAWjC,KAAKuC,G,OAEpBtC,QAAQC,IAAI,oBAAqB6B,EAAWC,EAAIJ,QAAQC,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,MAAO,YAAYH,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,K,+CAIxEvD,KAAKH,MAAMqD,G,eAAlCe,E,iBACyBjE,KAAKF,SAASmE,G,QAC3C,IADIC,E,OACKxB,EAAI,EAAGA,EAAIwB,EAAiBvC,OAAQe,IAAI,CAQ/C,IAPIiB,EAAU9B,iDAAWc,WAAWuB,EAAiBxB,IAAIE,KAAK,GAAGC,UAAUC,WAAW,GAAGA,YAAY,GACjGc,EAAO9B,EAAMnC,QAAQgE,GACzBJ,EAAMK,EAAKb,WAEPc,EAAO,EACPC,EAAM,EAEFd,EAAI,EAAGA,EAAIO,EAAI5B,OAAQqB,IAC1Ba,EAAON,EAAIP,KACZa,EAAON,EAAIP,GACXc,EAAMd,GAIPa,GAAQzB,GACToB,EAAWjC,KAAKuC,G,OAEpBtC,QAAQC,IAAI,oBAAqB6B,EAAWC,EAAIJ,QAAQC,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,MAAO,YAAYH,KAAKC,IAAL,MAAAD,KAAI,uJAAQG,K,+CAGxEvD,KAAKH,MAAMqD,G,eAAlCiB,E,iBACyBnE,KAAKF,SAASqE,G,QAC3C,IADIC,E,OACK1B,EAAI,EAAGA,EAAI0B,EAAiBzC,OAAQe,IAAI,CAQ/C,IAPIiB,EAAU9B,iDAAWc,WAAWyB,EAAiB1B,IAAIE,KAAK,GAAGC,UAAUC,WAAW,GAAGA,YAAY,GACjGc,EAAO9B,EAAMnC,QAAQgE,GACzBJ,EAAMK,EAAKb,WAEPc,EAAO,EACPC,EAAM,EAEFd,EAAI,EAAGA,EAAIO,EAAI5B,OAAQqB,IAC1Ba,EAAON,EAAIP,KACZa,EAAON,EAAIP,GACXc,EAAMd,GAIPa,GAAQzB,GACToB,EAAWjC,KAAKuC,G,sCAQtB,IAFAtC,QAAQC,IAAI+B,GACRa,EAAM,GACFtD,EAAI,EAAGA,EAAIyC,EAAW7B,OAAQZ,IACpCsD,GAAOf,EAAWE,EAAWzC,IAAM,IAGrCf,KAAKf,SAAS,CAAEI,WAAYgF,I,qIAK3BC,GACL,IAAMvE,EAASC,KAAKV,UAAUW,QACxBC,EAAMH,EAAOI,WAAW,MACxB2D,EAAM,CACRS,EAAGD,EAAEE,QAAUzE,EAAO0E,wBAAwBC,KAC9CC,EAAGL,EAAEM,QAAU7E,EAAO0E,wBAAwBI,KAElB,OAA5B7E,KAAKb,MAAMC,cAAyBY,KAAKb,MAAMD,UACjDgB,EAAI4E,UAAY,GAChB5E,EAAI6E,QAAU,QACd7E,EAAI8E,YACJ9E,EAAIK,UAAY,UAChBL,EAAI+E,OAAOjF,KAAKb,MAAMC,aAAamF,EAAGvE,KAAKb,MAAMC,aAAauF,GAC9DzE,EAAIgF,OAAOpB,EAAIS,EAAGT,EAAIa,GACtBzE,EAAIiF,YACJjF,EAAIkF,UAENpF,KAAKf,SAAS,CAACG,aAAc0E,M,sCAGtB,IAAD,YACN,OACE,6EACE,6FACA,qEAAQuB,IAAKrF,KAAKV,UAAWe,MAAO,IAAKC,OAAQ,IAAKgF,YAAa,SAAAhB,GAAC,OAAI,OAAK1E,OAAO0E,IAAIiB,UAAWvF,KAAKlB,YAAa0G,YAAaxF,KAAKlB,YAAvI,eACA,mEAAK2G,UAAU,SAAf,UACE,qEAAQC,QAAS1F,KAAKP,MAAtB,mBACA,qEAAQiG,QAAS1F,KAAKL,QAAtB,qBACA,kEAAK8F,UAAU,SAEjB,0EAAKzF,KAAKb,MAAME,aAChB,0EAAKsG,KAAK3F,KAAKb,MAAME,qB,KAvRXuG,+CA6RHhH,2B,wFC/RfiH,IAASC,OACL,cAAC,IAAD,IACFnF,SAASoF,eAAe,U","file":"static/js/main.8c415da2.chunk.js","sourcesContent":["import \"./index.css\";\r\nimport React, { Component } from 'react';\r\nimport * as tf from '@tensorflow/tfjs';\r\nimport { valueAndGrads } from \"@tensorflow/tfjs\";\r\n\r\n\r\nclass App extends Component {\r\n  constructor(props){\r\n    super(props);\r\n    this.state= {\r\n      lastPosition:null,\r\n      drawing:false,\r\n      prediction:null,\r\n    };\r\n    this.canvasRef = React.createRef();\r\n    this.clear = this.clear.bind(this);\r\n    this.predict = this.predict.bind(this);\r\n    this.moving = this.moving.bind(this);\r\n    this.split = this.split.bind(this);\r\n    this.rescaled = this.rescaled.bind(this);\r\n  }\r\n\r\n  handleEvent = (event) => {\r\n    if (event.type === \"mousedown\")\r\n      this.setState({ drawing: true});\r\n    else\r\n      this.setState({ drawing: false});\r\n   }\r\n\r\n  clear() {\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\r\n    ctx.fillStyle = \"#FFFF\";\r\n    ctx.fillRect(0, 0, canvas.width, canvas.height);\r\n  }\r\n\r\n  async split(n){\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext(\"2d\");\r\n\r\n    const resizedCanvas = document.createElement(\"canvas\");\r\n    const resizedContext = resizedCanvas.getContext(\"2d\");\r\n    resizedCanvas.width = await canvas.width/n;\r\n    resizedCanvas.height = 400;\r\n\r\n    const splits = [];\r\n    for(var i = 0; i < n; i++){\r\n      var img = new Image(600/n,400);\r\n      const Image_data = await ctx.getImageData(i*canvas.width/n, 0, 600/n, 400);\r\n      resizedContext.putImageData(Image_data,0,0);\r\n      img.src = resizedCanvas.toDataURL();\r\n      splits.push(img);\r\n    }\r\n    console.log(splits);\r\n\r\n    return splits; //returns an array of Elemets <img>\r\n  }\r\n\r\n  async rescaled(arr){\r\n    const rescaled = [];\r\n\r\n    const resizedCanvas = document.createElement(\"canvas\");\r\n    const resizedContext = resizedCanvas.getContext(\"2d\");\r\n    resizedCanvas.height = 32;\r\n    resizedCanvas.width = 32;\r\n\r\n    for(let i = 0; i < arr.length; i++){\r\n      var img = new Image(32,32);\r\n      resizedContext.drawImage(await arr[i],0,0,32,32);\r\n      img.src = resizedCanvas.toDataURL();\r\n      resizedContext.clearRect(0,0,32,32);\r\n      rescaled.push(img);\r\n    }\r\n    console.log(rescaled);\r\n    return rescaled;\r\n  }\r\n\r\n  async predict(){\r\n    const model = await tf.loadLayersModel('https://storage.googleapis.com/mathsolvermodel/model.json');\r\n\r\n    var split_count = 4;\r\n    var counter_1 = 0;\r\n    var counter_2 = 0;\r\n    var counter_3 = 0;\r\n    var counter_4 = 0;\r\n    var threshold = 0.7;\r\n\r\n\r\n    var split_images = [];\r\n    var resized_images = [];\r\n\r\n    var resized_grayscale_Tensor = null;\r\n    var prediction = null;\r\n    var value = [];\r\n    var counter_arr = [];\r\n\r\n    for(let i = 1; i < split_count+1; i++){\r\n      split_images = await this.split(i);\r\n      resized_images = await this.rescaled(split_images);\r\n      console.log(resized_images);\r\n      console.log(\"above you\");\r\n        for (let j = 0; j < resized_images.length; j++){\r\n          resized_grayscale_Tensor = tf.browser.fromPixels(resized_images[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n          prediction = model.predict(resized_grayscale_Tensor);\r\n          value = prediction.dataSync();\r\n          for (let k = 0; k < value.length; k++){\r\n            switch (i){\r\n              case 1:\r\n                if (value[k] > threshold){\r\n                  counter_1++;\r\n                  console.log('counter_1',counter_1);\r\n                }\r\n                break;\r\n              case 2:\r\n                if (value[k] > threshold){\r\n                  counter_2++;\r\n                  console.log(counter_2);\r\n                }\r\n                break;\r\n              case 3:\r\n                if (value[k] > threshold){\r\n                  counter_3++;\r\n                  console.log(counter_3);\r\n                }\r\n                break;\r\n              case 4:\r\n                if (value[k] > threshold){\r\n                  counter_4++;\r\n                  console.log(counter_4);\r\n                }\r\n                break;\r\n            }\r\n          }\r\n        }\r\n        console.log('counter pls', counter_arr);\r\n      }\r\n      counter_arr.push(parseInt(counter_1));\r\n      counter_arr.push(parseInt(counter_2));\r\n      counter_arr.push(parseInt(counter_3));\r\n      counter_arr.push(parseInt(counter_4));\r\n\r\n      var max_counter_index = counter_arr.indexOf(Math.max(...counter_arr));\r\n      var characters = ['0','1','2','3','4','5','6','7','8','9','-','+','*','(',')','y','=']\r\n      var val = []\r\n      var max_values = [];\r\n      console.log(\"max Counter index\", max_counter_index);\r\n      switch(max_counter_index){\r\n        case(0):\r\n          var split_images_1 = await this.split(max_counter_index);\r\n          var resized_images_1 = await this.rescaled(split_images_1);\r\n          for (let j = 0; j < resized_images_1.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_1[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n            \r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n        case(1):\r\n          var split_images_2 = await this.split(max_counter_index);\r\n          var resized_images_2 = await this.rescaled(split_images_2);\r\n          for (let j = 0; j < resized_images_2.length; j++){\r\n            var resized= tf.browser.fromPixels(resized_images_2[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n            \r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n\r\n        case(2):\r\n          var split_images_3 = await this.split(max_counter_index);\r\n          var resized_images_3 = await this.rescaled(split_images_3);\r\n          for (let j = 0; j < resized_images_3.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_3[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n\r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n          console.log('final prediction:', characters[val.indexOf(Math.max(...val))],'accuracy:',Math.max(...val))\r\n          break;\r\n        case(3):\r\n          var split_images_4 = await this.split(max_counter_index);\r\n          var resized_images_4 = await this.rescaled(split_images_4);\r\n          for (let j = 0; j < resized_images_4.length; j++){\r\n            var resized = tf.browser.fromPixels(resized_images_4[j]).mean(2).toFloat().expandDims(0).expandDims(-1);\r\n            var pred = model.predict(resized);\r\n            val = pred.dataSync();\r\n\r\n            var maxi = 0;\r\n            var pos = 0;\r\n            \r\n            for(var k = 0; k < val.length; k++){\r\n              if(maxi < val[k]){\r\n                maxi = val[k];\r\n                pos = k;\r\n              }\r\n            }\r\n\r\n            if(maxi >= threshold)\r\n              max_values.push(pos);\r\n          }\r\n\r\n          break;\r\n        }\r\n\r\n        console.log(max_values);\r\n        var str = \"\";\r\n        for(var i = 0; i < max_values.length; i++){\r\n          str += characters[max_values[i]] + \" \";\r\n        }\r\n\r\n        this.setState({ prediction: str});\r\n\r\n\r\n    }\r\n\r\n  moving(e) {\r\n    const canvas = this.canvasRef.current;\r\n    const ctx = canvas.getContext('2d');\r\n      var pos = {\r\n        x: e.clientX - canvas.getBoundingClientRect().left,\r\n        y: e.clientY - canvas.getBoundingClientRect().top\r\n      };\r\n    if (this.state.lastPosition !== null && this.state.drawing) {\r\n      ctx.lineWidth = 10;\r\n      ctx.lineCap = \"round\";\r\n      ctx.beginPath();\r\n      ctx.fillStyle = \"#000000\";\r\n      ctx.moveTo(this.state.lastPosition.x, this.state.lastPosition.y);\r\n      ctx.lineTo(pos.x, pos.y);\r\n      ctx.closePath();\r\n      ctx.stroke();\r\n    }\r\n    this.setState({lastPosition: pos});\r\n  }\r\n\r\n  render(){\r\n    return (\r\n      <div>\r\n        <h1>My Math Solver</h1>\r\n        <canvas ref={this.canvasRef} width={600} height={400} onMouseMove={e => this.moving(e)} onMouseUp={this.handleEvent} onMouseDown={this.handleEvent}> </canvas>\r\n        <div className=\"stuffs\">\r\n          <button onClick={this.clear}>Clear</button>\r\n          <button onClick={this.predict}>Predict</button>\r\n          <img className=\"t\"></img>\r\n        </div>\r\n        <h2>{this.state.prediction}</h2>\r\n        <h2>{eval(this.state.prediction)}</h2>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n    <App />,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\n// reportWebVitals();\r\n"],"sourceRoot":""}